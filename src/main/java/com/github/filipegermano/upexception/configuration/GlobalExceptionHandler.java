package com.github.filipegermano.upexception.configuration;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.http.HttpStatus;
import org.springframework.validation.BindException;
import org.springframework.validation.FieldError;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import com.github.filipegermano.upexception.enums.ExceptionMessage;
import com.github.filipegermano.upexception.exception.*;
import com.github.filipegermano.upexception.util.UrlUtil;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

/**
 * This class captures the exceptions generated by the system and redirects them to the Heimdall custom exceptions.
 *
 * @author Filipe Germano
 */
@ControllerAdvice
@Slf4j
public class GlobalExceptionHandler {

    @Autowired
    private MessageSource messageSource;

    /**
     * Method that captures all the {@link NotFoundException} exceptions.
     *
     * @param response  {@link HttpServletResponse}
     * @param request   {@link HttpServletRequest}
     * @param exception {@link Exception}
     * @return {@link ErroInfo}
     */
    @ResponseStatus(HttpStatus.NOT_FOUND)
    @ExceptionHandler(NotFoundException.class)
    public @ResponseBody
    ErroInfo handleExceptionNotFound(HttpServletResponse response, HttpServletRequest request, Exception exception) {

        ErroInfo erroInfo = buildErrorInfo(request, exception);
        return erroInfo;

    }

    /**
     * Method that captures all the {@link ServerErrorException} exceptions.
     *
     * @param response  {@link HttpServletResponse}
     * @param request   {@link HttpServletRequest}
     * @param exception {@link Exception}
     * @return {@link ErroInfo}
     */
    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
    @ExceptionHandler(ServerErrorException.class)
    public @ResponseBody
    ErroInfo handleExceptionServerError(HttpServletResponse response, HttpServletRequest request, Exception exception) {

        ErroInfo erroInfo = buildErrorInfo(request, exception);
        return erroInfo;

    }

    /**
     * Method that captures all the {@link ServerErrorException} exceptions.
     *
     * @param response  {@link HttpServletResponse}
     * @param request   {@link HttpServletRequest}
     * @param exception {@link Exception}
     * @return {@link ErroInfo}
     */
    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
    @ExceptionHandler(Exception.class)
    public @ResponseBody
    ErroInfo handleException(HttpServletResponse response, HttpServletRequest request, Exception exception) {

        ErroInfo erroInfo = buildErrorInfoException(request, exception);
        log.error(exception.getMessage(), exception);
        return erroInfo;

    }

    /**
     * Method that captures all the {@link BadRequestException} exceptions.
     *
     * @param response  {@link HttpServletResponse}
     * @param request   {@link HttpServletRequest}
     * @param exception {@link Exception}
     * @return {@link ErroInfo}
     */
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    @ExceptionHandler(BadRequestException.class)
    public @ResponseBody
    ErroInfo handleExceptionBadRequest(HttpServletResponse response, HttpServletRequest request, Exception exception) {

        ErroInfo erroInfo = buildErrorInfo(request, exception);
        return erroInfo;

    }

    /**
     * Method that captures all the {@link UnauthorizedException} exceptions.
     *
     * @param response  {@link HttpServletResponse}
     * @param request   {@link HttpServletRequest}
     * @param exception {@link Exception}
     * @return {@link ErroInfo}
     */
    @ResponseStatus(HttpStatus.UNAUTHORIZED)
    @ExceptionHandler(UnauthorizedException.class)
    public @ResponseBody
    ErroInfo handleExceptionUnauthorized(HttpServletResponse response, HttpServletRequest request, Exception exception) {

        ErroInfo erroInfo = buildErrorInfo(request, exception);
        return erroInfo;

    }

    /**
     * Method that captures all the {@link ForbiddenException} exceptions.
     *
     * @param response  {@link HttpServletResponse}
     * @param request   {@link HttpServletRequest}
     * @param exception {@link Exception}
     * @return {@link ErroInfo}
     */
    @ResponseStatus(HttpStatus.FORBIDDEN)
    @ExceptionHandler(ForbiddenException.class)
    public @ResponseBody
    ErroInfo handleExceptionForbidden(HttpServletResponse response, HttpServletRequest request, Exception exception) {

        ErroInfo erroInfo = buildErrorInfo(request, exception);
        return erroInfo;

    }

    /**
     * Method that captures all the {@link BindExceptionInfo} exceptions.
     *
     * @param response  {@link HttpServletResponse}
     * @param request   {@link HttpServletRequest}
     * @param exception {@link BindExceptionInfo}
     * @return {@link BindExceptionInfo}
     */
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    @ExceptionHandler(BindException.class)
    public @ResponseBody
    BindExceptionInfo validationBindException(HttpServletResponse response, HttpServletRequest request, BindException exception) {

        BindExceptionInfo bindException = new BindExceptionInfo();
        List<BindExceptionInfo.BindError> errors = new ArrayList<>();
        List<ObjectError> objectsError = exception.getBindingResult().getAllErrors();

        objectsError.forEach(objectError -> {
            FieldError fieldError = (FieldError) objectError;

            String message = null;

            try {

                String code = fieldError.getCodes()[0];
                message = messageSource.getMessage(code, null, LocaleContextHolder.getLocale());
            } catch (Exception e) {

                message = null;
            }

            bindException.timestamp = LocalDateTime.now();
            bindException.status = 400;
            bindException.exception = "BindException";

            BindExceptionInfo.BindError error = bindException.new BindError();
            error.defaultMessage = message != null ? message : fieldError.getDefaultMessage();
            error.objectName = fieldError.getObjectName();
            error.field = fieldError.getField();
            error.code = fieldError.getCode();

            errors.add(error);
        });

        bindException.erros = errors;

        return bindException;
    }

    /**
     * Method that captures all the {@link BindExceptionInfo} exceptions.
     *
     * @param response  {@link HttpServletResponse}
     * @param request   {@link HttpServletRequest}
     * @param exception {@link BindExceptionInfo}
     * @return {@link BindExceptionInfo}
     */
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public @ResponseBody
    BindExceptionInfo validationMethodArgumentNotValidException(HttpServletResponse response, HttpServletRequest request, MethodArgumentNotValidException exception) {

        BindExceptionInfo bindException = new BindExceptionInfo();
        List<BindExceptionInfo.BindError> errors = new ArrayList<>();
        List<ObjectError> objectsError = exception.getBindingResult().getAllErrors();

        objectsError.forEach(objectError -> {
            FieldError fieldError = (FieldError) objectError;

            bindException.timestamp = LocalDateTime.now();
            bindException.status = 400;
            bindException.exception = "MethodArgumentNotValidException";

            BindExceptionInfo.BindError error = bindException.new BindError();
            error.defaultMessage = fieldError.getDefaultMessage();
            error.objectName = fieldError.getObjectName();
            error.field = fieldError.getField();
            error.code = fieldError.getCode();

            errors.add(error);
        });

        bindException.erros = errors;

        return bindException;
    }

    /**
     * Method responsible to create the exception object.
     *
     * @param request   {@link HttpServletRequest}
     * @param exception {@link Exception}
     * @return {@link ErroInfo}
     */
    private ErroInfo buildErrorInfo(HttpServletRequest request, Exception exception) {

        UpException upException = (UpException) exception;
        ErroInfo erroInfo = new ErroInfo(LocalDateTime.now(), upException.getMessageException().getHttpCode(), upException.getClass().getSimpleName(), upException.getMessage(), UrlUtil.getCurrentUrl(request));
        return erroInfo;
    }

    /**
     * Method responsible to create the exception object.
     *
     * @param request   {@link HttpServletRequest}
     * @param exception {@link Exception}
     * @return {@link ErroInfo}
     */
    private ErroInfo buildErrorInfoException(HttpServletRequest request, Exception exception) {

        UpException upException = new UpException(ExceptionMessage.INTERNAL_SERVER_ERROR);
        ErroInfo erroInfo = new ErroInfo(LocalDateTime.now(), upException.getMessageException().getHttpCode(), upException.getClass().getSimpleName(), upException.getMessage(), UrlUtil.getCurrentUrl(request));
        return erroInfo;
    }

    /**
     * Class that represents the return object used by all Up Exceptions.
     *
     * @author Filipe Germano
     */
    @AllArgsConstructor
    @Getter
    public class ErroInfo {

        /**
         * TImestamp from the moment that the exception was created.
         */
        public LocalDateTime timestamp;

        /**
         * Exception identifier.
         */
        public Integer code;

        /**
         * Exception class name.
         */
        public String exception;

        /**
         * Exception description.
         */
        public String message;

        /**
         * Path that generated the request that caused the exception.
         */
        public String path;

    }

    /**
     * Class that represents the exceptions created by the Up validations.
     *
     * @author Filipe Germano
     */
    public class BindExceptionInfo {

        @Getter
        public LocalDateTime timestamp;

        @Getter
        public Integer status;

        @Getter
        public String exception;

        @Getter
        public List<BindError> erros;

        public class BindError {

            public String defaultMessage;

            public String objectName;

            public String field;

            public String code;
        }

    }

}
